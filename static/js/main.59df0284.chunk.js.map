{"version":3,"sources":["state.ts","operations.ts","Board/Card.tsx","Board/Column.tsx","api/youtube.ts","keys.ts","Menus/SearchSidebar.tsx","hooks.ts","Menus/Sidebar.tsx","player/Player.tsx","Board/index.tsx","serviceWorker.ts","index.tsx"],"names":["_id","id","isFirstRender","useBoard","initial","boards","BOARD_1","boardId","boardName","columns","items","text","videoId","imageUrl","name","type","SEARCH","columnOrders","BOARD_2","boardsOrder","selectedBoard","storage","localStorage","getItem","JSON","parse","useState","app","setApp","setItem","stringify","getColumn","board","columnId","getItemBeingDragged","source","droppableId","index","removeItemFromBoard","itemIndex","column","splice","updateItemInColumn","insertIntoColumn","item","TaskContainer","styled","div","Img","img","Subtext","Task","onPress","draggableId","provided","onClick","ref","innerRef","dragHandleProps","draggableProps","src","DOMParser","parseFromString","body","textContent","Options","ColumnContainer","Title","h4","TaskList","props","isDraggingOver","ColumnView","onDelete","renameColumn","onPlay","isRenaming","setIsRenaming","newText","setNewText","onEditButtonPress","columnProvided","autoFocus","value","onChange","e","target","snapshot","droppableProps","map","Card","key","placeholder","logRequest","term","requestType","console","log","isItemSupported","itemKind","defaultProps","parseProps","allProps","Object","keys","filter","join","url","verb","SearchArea","onSearchDone","setTerm","debounced","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","pageToken","fetch","part","shart","maxResults","q","then","response","json","data","kind","snippet","thumbnails","medium","title","Math","random","searchVideos","data-testid","i","BoardItem","onSelectBoard","Item","isSelected","SelectedBoard","UnselectedBoard","h2","Sidebar","state","setState","SidebarContainer","YoutubePlayerWrapper","style","onReady","onEnd","opts","height","width","playerVars","autoplay","position","right","bottom","Player","setPlayer","BoardContainer","App","appState","setAppState","setVideoId","updateBoard","cc","createColumn","newColumn","concat","onRenameColumn","newName","onDragEnd","dropResult","result","destination","oldItem","without","handleDnd","direction","cId","Column","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59df0284.chunk.js","sourcesContent":["import { ApplicationState } from \"./types\";\nimport { useState } from \"react\";\n\nlet _id = 100;\nconst id = () => _id++ + \"\";\n\nconst initialState = (): ApplicationState => ({\n  boards: {\n    BOARD_1: {\n      boardId: \"BOARD_1\",\n      boardName: \"My Board\",\n      columns: {\n        \"1\": {\n          id: \"1\",\n          items: [\n            {\n              text: \"Album 1\",\n              id: id(),\n              videoId: \"1\",\n              imageUrl: \"https://i.ytimg.com/vi/6Zo_FTUNDBI/mqdefault.jpg\"\n            },\n            {\n              text: \"Album 2\",\n              id: id(),\n              videoId: \"1\",\n              imageUrl: \"https://i.ytimg.com/vi/-xj2BmxEkcI/mqdefault.jpg\"\n            },\n            {\n              text: \"Album 3\",\n              id: id(),\n              videoId: \"1\",\n              imageUrl: \"https://i.ytimg.com/vi/ZchNI8bEnoY/mqdefault.jpg\"\n            }\n          ],\n          name: \"First\",\n          type: \"PLAYLIST\"\n        },\n        \"2\": {\n          id: \"2\",\n          items: [\n            { text: \"Title 2\", id: id(), videoId: \"1\", imageUrl: \"\" },\n            { text: \"Title 3\", id: id(), videoId: \"1\", imageUrl: \"\" },\n            { text: \"Title 4\", id: id(), videoId: \"1\", imageUrl: \"\" },\n            { text: \"Title 5\", id: id(), videoId: \"1\", imageUrl: \"\" },\n            { text: \"Title 6\", id: id(), videoId: \"1\", imageUrl: \"\" }\n          ],\n          name: \"Second\",\n          type: \"PLAYLIST\"\n        },\n        \"3\": {\n          id: \"3\",\n          items: [\n            { text: \"Album 1.1\", id: id(), videoId: \"1\", imageUrl: \"\" },\n            { text: \"Album 2.2\", id: id(), videoId: \"1\", imageUrl: \"\" },\n            { text: \"Album 3.3\", id: id(), videoId: \"1\", imageUrl: \"\" }\n          ],\n          name: \"Third\",\n          type: \"SEARCH\"\n        },\n        SEARCH: {\n          id: \"SEARCH\",\n          items: [],\n          name: \"SEARCH\",\n          type: \"SEARCH\"\n        }\n      },\n      columnOrders: [\"1\", \"2\", \"3\"]\n    },\n    BOARD_2: {\n      boardName: \"ANOTHER BOARd\",\n      boardId: \"BOARD_2\",\n      columns: {\n        SEARCH: {\n          id: \"SEARCH\",\n          items: [],\n          name: \"SEARCH\",\n          type: \"SEARCH\"\n        }\n      },\n      columnOrders: []\n    }\n  },\n  boardsOrder: [\"BOARD_1\", \"BOARD_2\"],\n  selectedBoard: \"BOARD_1\"\n});\n\ntype Hook = [ApplicationState, (appState: ApplicationState) => void];\nlet isFirstRender = false;\nexport const useBoard = (): Hook => {\n  let initial = initialState();\n  if (!isFirstRender) {\n    isFirstRender = true;\n    const storage = localStorage.getItem(\"MY_STORAGE\");\n    if (storage) {\n      initial = JSON.parse(storage) as ApplicationState;\n    }\n  }\n  const [app, setApp] = useState(initial);\n  const onAppStateUpdate = (app: ApplicationState) => {\n    localStorage.setItem(\"MY_STORAGE\", JSON.stringify(app));\n    setApp(app);\n  };\n  return [app, onAppStateUpdate];\n};\n","import {Board, Item} from \"./types\";\nimport {DraggableLocation, DropResult} from \"react-beautiful-dnd\";\n\nexport const handleDnd = (board: Board, result: DropResult): Board => {\n  const {destination, source} = result;\n  if (!destination) return board;\n\n  if (\n    destination.droppableId === source.droppableId &&\n    destination.index === source.index\n  )\n    return board;\n\n  if (source.droppableId === \"board\") {\n    const columnOrders = [...board.columnOrders];\n    columnOrders.splice(source.index, 1);\n    columnOrders.splice(destination.index, 0, result.draggableId);\n    return {\n      ...board,\n      columnOrders\n    };\n  }\n\n  const oldItem = getItemBeingDragged(board, source);\n\n  const without = removeItemFromBoard(board, source.droppableId, source.index);\n\n  return insertIntoColumn(\n    without,\n    destination.droppableId,\n    destination.index,\n    oldItem\n  );\n};\n\nconst getColumn = (board: Board, columnId: string) => board.columns[columnId];\n\nconst getItemBeingDragged = (board: Board, source: DraggableLocation) =>\n  board.columns[source.droppableId].items[source.index];\n\nconst removeItemFromBoard = (\n  board: Board,\n  columnId: string,\n  itemIndex: number\n): Board => {\n  const column = getColumn(board, columnId);\n  const items = [...column.items];\n  items.splice(itemIndex, 1);\n  return updateItemInColumn(board, columnId, items);\n};\n\nconst insertIntoColumn = (\n  board: Board,\n  columnId: string,\n  itemIndex: number,\n  item: any\n) => {\n  const column = getColumn(board, columnId);\n  const items = [...column.items];\n  items.splice(itemIndex, 0, item);\n  return updateItemInColumn(board, columnId, items);\n};\n\nconst updateItemInColumn = (\n  board: Board,\n  columnId: string,\n  items: Item[]\n): Board => {\n  return {\n    ...board,\n    columns: {\n      ...board.columns,\n      [columnId]: {\n        ...getColumn(board, columnId),\n        items\n      }\n    }\n  };\n};\n","import styled from \"styled-components\";\nimport {Item} from \"../types\";\nimport {Draggable} from \"react-beautiful-dnd\";\nimport React from \"react\";\n\ninterface Props {\n  item: Item;\n  index: number;\n  onPress: () => void;\n}\n\nconst decode = (text: string) => {\n  const dom = new DOMParser().parseFromString(\n    \"<!doctype html><body>\" + text,\n    \"text/html\"\n  );\n  return dom.body.textContent;\n};\n\nconst Task = ({item, index, onPress}: Props) => (\n  <Draggable draggableId={item.id} index={index} type=\"item\">\n    {provided => (\n      <TaskContainer\n        onClick={onPress}\n        ref={provided.innerRef}\n        {...provided.dragHandleProps}\n        {...provided.draggableProps}\n      >\n        <Img src={item.imageUrl}></Img>\n        <Subtext>{decode(item.text)}</Subtext>\n      </TaskContainer>\n    )}\n  </Draggable>\n);\n\nconst TaskContainer = styled.div`\n  border-radius: 4px;\n  background-color: white;\n  margin-bottom: 8px;\n`;\n\nconst Img = styled.img`\n  width: 100%;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n`;\n\nconst Subtext = styled.div`\n  color: #1e1e1e;\n  padding: 4px;\n`;\nexport default Task;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Column } from \"../types\";\nimport Card from \"./Card\";\n\ninterface Props {\n  column: Column;\n  index: number;\n  onDelete: (columnId: string) => void;\n  onPlay: (youtubeId: string) => void;\n  renameColumn: (columnId: string, newText: string) => void;\n}\n\nconst ColumnView = ({\n  column,\n  index,\n  onDelete,\n  renameColumn,\n  onPlay\n}: Props) => {\n  const [isRenaming, setIsRenaming] = useState(false);\n  const [newText, setNewText] = useState(column.name);\n  const onEditButtonPress = () => {\n    if (isRenaming) {\n      renameColumn(column.id, newText);\n    }\n    setIsRenaming(!isRenaming);\n  };\n  return (\n    <Draggable draggableId={column.id} index={index}>\n      {columnProvided => (\n        <ColumnContainer\n          ref={columnProvided.innerRef}\n          {...columnProvided.draggableProps}\n        >\n          <Title {...columnProvided.dragHandleProps}>\n            {isRenaming ? (\n              <input\n                autoFocus\n                type=\"text\"\n                value={newText}\n                onChange={e => setNewText(e.target.value)}\n              />\n            ) : (\n              column.name\n            )}{\" \"}\n            <Options>\n              <button onClick={onEditButtonPress}>E</button>\n              <button onClick={() => onDelete(column.id)}>X</button>\n            </Options>\n          </Title>\n          <Droppable droppableId={column.id} type=\"item\">\n            {(provided, snapshot) => (\n              <TaskList\n                isDraggingOver={snapshot.isDraggingOver}\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n              >\n                {column.items.map((item, index) => (\n                  <Card\n                    onPress={() => onPlay(item.videoId)}\n                    index={index}\n                    key={item.id}\n                    item={item}\n                  />\n                ))}\n                {provided.placeholder}\n              </TaskList>\n            )}\n          </Droppable>\n        </ColumnContainer>\n      )}\n    </Draggable>\n  );\n};\nconst Options = styled.div`\n  display: none;\n`;\n\nconst ColumnContainer = styled.div`\n  background-color: lightgrey;\n  margin-left: 8px;\n  border-radius: 2px;\n  width: 220px;\n  display: flex;\n  flex-direction: column;\n  padding-left: 8px;\n  padding-right: 8px;\n  &:hover ${Options} {\n    display: inherit;\n  }\n`;\n\nconst Title = styled.h4`\n  margin-bottom: 0;\n  padding: 8px;\n\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst TaskList = styled.div<any>`\n  background-color: ${(props: any) =>\n    props.isDraggingOver ? \"skyblue\" : \"lightgrey\"};\n  flex-grow: 1;\n  min-height: 50px;\n`;\n\nexport default ColumnView;\n","import {YOUTUBE_KEY} from \"../keys\";\nimport {ItemKind, YoutubeSearchResponse} from \"./types\";\nimport {Item} from \"../types\";\n\ninterface ResponseType {\n  items: Item[];\n}\n\nexport const searchVideos = (\n  term: string,\n  pageToken?: string\n): Promise<ResponseType> =>\n  fetch(\n    url(\"search\", {\n      part: \"snippet\",\n      shart: \"mostPopular\",\n      maxResults: 10,\n      pageToken,\n      q: logRequest(term, \"search\")\n    })\n  )\n    .then(response => response.json())\n    .then((data: YoutubeSearchResponse) => ({\n      //TODO: extract duplication\n      // nextPageToken: data.nextPageToken,\n      // totalResults: data.pageInfo.totalResults,\n      items: data.items\n        .filter(item => isItemSupported(item.id.kind))\n        .map(item => ({\n          videoId: item.id.videoId || \"\",\n          imageUrl: item.snippet.thumbnails.medium.url,\n          text: item.snippet.title,\n          id: Math.random() + \"\"\n        }))\n    }));\n\nconst logRequest = (term: string, requestType: string) => {\n  console.log(`Requesting Youtube ${requestType} for ${term}`);\n  return term;\n};\n\nconst isItemSupported = (itemKind: ItemKind): boolean =>\n  itemKind === \"youtube#video\";\n// itemKind === \"youtube#playlist\" ||\n// itemKind === \"youtube#channel\";\n\nconst defaultProps = {\n  key: YOUTUBE_KEY\n};\n\nconst parseProps = (props: any): string => {\n  const allProps = {...props, ...defaultProps};\n  return Object.keys(allProps)\n    .filter(key => typeof allProps[key] !== \"undefined\")\n    .map(key => `${key}=${allProps[key]}`)\n    .join(\"&\");\n};\nconst url = (verb: string, props: {}) =>\n  `https://www.googleapis.com/youtube/v3/${verb}?${parseProps(props)}`;\n","export const YOUTUBE_KEY = \"AIzaSyBsCL-zrXWd9S2FKRSDVfz7dOo783LQkLk\";\n","import { Item } from \"../types\";\nimport React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\nimport { searchVideos } from \"../api/youtube\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Card from \"../Board/Card\";\n\nexport interface SearchProps {\n  items: Item[];\n  onSearchDone: (items: Item[]) => void;\n  onPlay: (youtubeId: string) => void;\n}\n\nconst SearchArea = ({ items, onSearchDone, onPlay }: SearchProps) => {\n  const [term, setTerm] = useState(\"\");\n  const debounced = useDebounce(term, 600);\n  const onSearch = (e: ChangeEvent<HTMLInputElement>) =>\n    setTerm(e.target.value);\n\n  useEffect(() => {\n    if (debounced) {\n      searchVideos(debounced).then(response => onSearchDone(response.items));\n    }\n  }, [debounced]);\n\n  return (\n    <>\n      <input\n        data-testid=\"search-input\"\n        type=\"text\"\n        value={term}\n        onChange={onSearch}\n      />\n      <Droppable droppableId=\"SEARCH\" type=\"item\">\n        {(provided, snapshot) => (\n          <div ref={provided.innerRef} {...provided.droppableProps}>\n            {items.map((i, index) => (\n              <Card\n                onPress={() => onPlay(i.videoId)}\n                key={i.id}\n                index={index}\n                item={i}\n              />\n            ))}\n          </div>\n        )}\n      </Droppable>\n    </>\n  );\n};\n\nexport default SearchArea;\n","import {useEffect, useState} from \"react\";\n\nexport function useDebounce(value: any, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import React, {useState} from \"react\";\nimport styled from \"styled-components\";\nimport SearchArea from \"./SearchSidebar\";\nimport {ApplicationState, Board, Item} from \"../types\";\n\ntype SidebarState = \"search\" | \"board\";\n\ninterface Props {\n  app: ApplicationState;\n  onSearchDone: (items: Item[]) => void;\n  onSelectBoard: (boardId: string) => void;\n  onPlay: (youtubeId: string) => void;\n}\n\nconst Sidebar = ({app, onSearchDone, onSelectBoard, onPlay}: Props) => {\n  const [state, setState] = useState<SidebarState>(\"search\");\n  return (\n    <SidebarContainer>\n      <button data-testid=\"boards-button\" onClick={() => setState(\"board\")}>\n        boards\n      </button>\n      <button data-testid=\"search-button\" onClick={() => setState(\"search\")}>\n        search\n      </button>\n      {state === \"search\" ? (\n        <SearchArea\n          onPlay={onPlay}\n          items={app.boards[app.selectedBoard].columns['SEARCH'].items}\n          onSearchDone={onSearchDone}\n        />\n      ) : (\n        <div data-testid=\"board-view\">\n          {app.boardsOrder.map(boardId => (\n            <BoardItem\n              key={boardId}\n              onSelectBoard={onSelectBoard}\n              isSelected={boardId === app.selectedBoard}\n              board={app.boards[boardId]}\n            />\n          ))}\n        </div>\n      )}\n    </SidebarContainer>\n  );\n};\n\ninterface BoardItemProps {\n  onSelectBoard: (boardId: string) => void;\n  board: Board;\n  isSelected: boolean;\n}\n\nconst BoardItem = ({onSelectBoard, board, isSelected}: BoardItemProps) => {\n  const Item = isSelected ? SelectedBoard : UnselectedBoard;\n  return (\n    <div>\n      <Item\n        data-testid={\"board-\" + board.boardId}\n        onClick={() => onSelectBoard(board.boardId)}\n      >\n        {board.boardName}\n      </Item>\n    </div>\n  );\n};\n\nconst SelectedBoard = styled.h2``;\nconst UnselectedBoard = styled.h4``;\nexport default Sidebar;\n\nconst SidebarContainer = styled.div`\n  overflow: scroll;\n  position: fixed;\n  width: 200px;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 200px;\n  background-color: white;\n  border-right: solid 1px #70797e;\n`;\n","import React, { useState } from \"react\";\nimport Youtube from \"react-youtube\";\n\ninterface Props {\n  videoId?: string;\n  onEnd: () => void;\n}\n\nconst Player = ({ videoId, onEnd }: Props) => {\n  const [player, setPlayer] = useState();\n\n  if (!videoId) return null;\n\n  return <YoutubePlayerWrapper onReady={setPlayer} videoId={videoId} onEnd={onEnd} />;\n};\n\nconst YoutubePlayerWrapper = (props: any) => (\n  <div style={style}>\n    <Youtube\n      {...props}\n      onReady={e => props.onReady(e.target)}\n      onEnd={props.onEnd}\n      data-testid=\"player\"\n      opts={{\n        height: \"150\",\n        width: \"400\",\n        playerVars: {\n          // https://developers.google.com/youtube/player_parameters\n          autoplay: 1\n        }\n      }}\n    />\n  </div>\n);\n\nconst style = {\n  position: \"fixed\",\n  right: 15,\n  bottom: 15\n} as {};\n\nexport default Player;\n","import React, { useState } from \"react\";\nimport { useBoard } from \"../state\";\nimport styled from \"styled-components\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { handleDnd } from \"../operations\";\nimport ColumnView from \"./Column\";\nimport { Board, Column, Item } from \"../types\";\nimport Sidebar from \"../Menus/Sidebar\";\nimport Player from \"../player/Player\";\n\nconst App = () => {\n  const [appState, setAppState] = useBoard();\n  const [videoId, setVideoId] = useState<string>();\n  const updateBoard = (board: Board) => {\n    setAppState({\n      ...appState,\n      boards: {\n        ...appState.boards,\n        [board.boardId]: board\n      }\n    });\n  };\n  const selectedBoard = appState.boards[appState.selectedBoard];\n\n  const onDragEnd = (dropResult: DropResult) => {\n    updateBoard(handleDnd(selectedBoard, dropResult));\n  };\n  const onSearchDone = (items: Item[]) => {\n    updateBoard({\n      ...selectedBoard,\n      columns: {\n        ...selectedBoard.columns,\n        SEARCH: {\n          ...selectedBoard.columns[\"SEARCH\"],\n          items\n        }\n      }\n    });\n  };\n\n  const onDelete = (columnId: string) => {\n    const columns = {\n      ...selectedBoard.columns\n    };\n    delete columns[columnId];\n    updateBoard({\n      ...selectedBoard,\n      columnOrders: selectedBoard.columnOrders.filter(cc => cc !== columnId),\n      columns: columns\n    });\n  };\n  const createColumn = () => {\n    const newColumn: Column = {\n      items: [],\n      name: \"New Column\",\n      id: Math.random() + \"\",\n      type: \"PLAYLIST\"\n    };\n    updateBoard({\n      ...selectedBoard,\n      columnOrders: selectedBoard.columnOrders.concat([newColumn.id]),\n      columns: {\n        ...selectedBoard.columns,\n        [newColumn.id]: newColumn\n      }\n    });\n  };\n  const onSelectBoard = (boardId: string) => {\n    setAppState({\n      ...appState,\n      selectedBoard: boardId\n    });\n  };\n\n  const onRenameColumn = (columnId: string, newName: string) => {\n    updateBoard({\n      ...selectedBoard,\n      columns: {\n        ...selectedBoard.columns,\n        [columnId]: {\n          ...appState.boards[appState.selectedBoard].columns[columnId],\n          name: newName\n        }\n      }\n    });\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Sidebar\n        onPlay={setVideoId}\n        app={appState}\n        onSearchDone={onSearchDone}\n        onSelectBoard={onSelectBoard}\n      />\n      <Droppable droppableId=\"board\" direction={\"horizontal\"} type=\"column\">\n        {provided => (\n          <BoardContainer ref={provided.innerRef} {...provided.droppableProps}>\n            {selectedBoard.columnOrders.map((cId, index) => (\n              <ColumnView\n                onPlay={setVideoId}\n                key={cId}\n                onDelete={onDelete}\n                column={selectedBoard.columns[cId]}\n                index={index}\n                renameColumn={onRenameColumn}\n              />\n            ))}\n            {provided.placeholder}\n            <button onClick={createColumn}>+ Playlist</button>\n          </BoardContainer>\n        )}\n      </Droppable>\n      <Player\n        videoId={videoId}\n        onEnd={() => console.log(\"on video end, TODO: play next track\")}\n      />\n    </DragDropContext>\n  );\n};\n\nconst BoardContainer = styled.div`\n  min-height: calc(100vh - 16px);\n  min-width: calc(100vh - 8px);\n  display: inline-flex;\n  align-items: flex-start;\n  //to balance for margin-left of the rightmost item\n  margin: 8px 8px 8px 200px;\n`;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Board\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}