{"version":3,"sources":["serviceWorker.ts","shared/utils.ts","menu/actions.ts","api/youtube.ts","board/actions.ts","api/fetch.ts","keys.ts","operations.ts","state.ts","board/reducer.ts","player/actions.ts","menu/reducer.ts","store.ts","player/reducer.ts","board/components/constants.ts","board/components/index.ts","board/Card.tsx","menu/components/index.ts","menu/SearchSidebar.tsx","hooks.ts","menu/constants.ts","shared/EditableTitle.tsx","menu/BoardsSidebar.tsx","menu/SimilarSidebar.tsx","menu/Sidebar.tsx","player/Player.tsx","board/Column.tsx","board/index.tsx","api/dummyText.tsx","CoreLayout.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","createId","Math","random","topBarButtonPressed","buttonPressedType","type","ACTIONS","searchForVideos","verb","props","input","url","part","maxResults","fetch","then","res","json","data","items","filter","item","isItemSupported","getId","kind","map","videoId","playlistId","imageUrl","snippet","thumbnails","medium","text","title","id","mapType","resourceId","logRequest","term","requestType","console","log","itemKind","defaultProps","key","allProps","Object","keys","join","parseProps","createColumn","columnConfiguration","CREATE_COLUMN","selectBoard","boardId","SELECT_BOARD","doneLoadingPlaylist","DONE_LOADING_PLAYLIST","getColumn","board","columnId","columns","getItemBeingDragged","source","droppableId","index","removeItemFromBoard","itemIndex","column","splice","updateItemInColumn","insertIntoColumn","_id","initialState","boards","BOARD_1","boardName","boardOptions","name","SEARCH","columnOrders","BOARD_2","boardsOrder","selectedBoard","userOptions","isLeftSidebarVisible","leftSidebarContentType","selectOtherBoard","boardBeingRemoved","b","updateBoard","state","updateColumnInBoard","createDefaultBoard","newBoard","JSON","parse","stringify","updateColumnInSelectedBoard","getSelectedBoard","getColumnsForSelectedBoard","append","array","concat","prepend","updateBoardOptions","options","updateOptions","updateUserOptions","rootReducer","reduceReducers","action","RESET","REMOVE_COLUMN","cc","newColumn","columnName","fromStart","SEARCH_DONE","RENAME_COLUMN","newName","DRAG_END","result","destination","draggableId","oldItem","without","handleDnd","dropResult","CREATE_BOARD","RENAME_BOARD","newText","REMOVE_BOARD","PLAY","itemBeingPlayed","isLoadingSimilar","leftVisible","sidebarState","newSidebarState","withoutLoad","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedReducer","persistReducer","blacklist","storage","store","createStore","applyMiddleware","thunk","persistStore","STACK_WIDTH","STACK_PADDING","CARD_IMAGE_WIDTH","CARD_IMAGE_HEIGHT","imageWidth","CARD_HEIGHT","CARD_WIDTH","stackWidth","CARD_TEXT_WIDTH","BORDER_RADIUS","SIDEBAR_WIDTH","TOP_BAR_HEIGHT","PLAYER_HEIGHT","Options","styled","div","ColumnContainer","c","TaskList","BoardContainer","Title","h4","CardButton","button","CardType","TaskContainer","isPlaying","Img","img","Subtext","connect","currentItemId","findSimilar","dispatch","getState","setTimeout","relatedToVideoId","searchSimilar","findSimilarArtistsDone","play","loadPlaylist","onFindSimilar","e","stopPropagation","onLoadPlaylist","provided","data-testid","onClick","ref","innerRef","dragHandleProps","draggableProps","src","Truncate","width","lines","DOMParser","parseFromString","body","textContent","BoardOptions","BoardItemView","isSelected","SidebarVideosContainer","searchDone","useState","setTerm","debounced","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","clearTimeout","useDebounce","pageToken","shart","q","searchVideos","response","onChange","target","snapshot","droppableProps","i","placeholder","EditableTitle","label","onRename","onRemove","testIdGroupName","isRenaming","setIsRenaming","setNewText","onBlur","autoFocus","onKeyPress","app","createAndSelectNewBoard","newID","renameBoard","removeBoard","similar","isLoading","Sidebar","BottomBar","YoutubePlayerWrapper","style","onReady","opts","height","playerVars","autoplay","position","right","bottom","setPlayer","renameColumn","removeColumn","columnProvided","direction","Column","paragrapg","Container","TopBar","MainContainer","isVisible","LeftSidebar","RightSidebar","MainContent","endDrag","onDragEnd","paragraphs","Array","from","createParagraphs","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3e3100a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const createId = () =>\n  Math.random() + '';\n\nexport default {\n  createId\n}\n","import { Item, SidebarState } from \"../types\";\nexport type Action =\n  | FindSimilarArtistsDone\n  | FindSimilarArtistsStart\n  | TopBarButtonPressed;\n\nexport interface FindSimilarArtistsDone {\n  type: \"FIND_SIMILAR_DONE\";\n  items: Item[];\n}\n\nexport interface TopBarButtonPressed {\n  type: \"TOP_BAR_BUTTON_PRESSED\";\n  buttonPressedType: SidebarState;\n}\n\nexport interface FindSimilarArtistsStart {\n  type: \"FIND_SIMILAR_START\";\n  items: Item[];\n}\n\nexport const findSimilarArtistsDone = (\n  items: Item[]\n): FindSimilarArtistsDone => ({\n  type: \"FIND_SIMILAR_DONE\",\n  items\n});\n\nexport const topBarButtonPressed = (\n  buttonPressedType: SidebarState\n): TopBarButtonPressed => ({\n  type: \"TOP_BAR_BUTTON_PRESSED\",\n  buttonPressedType\n});\n","import { YOUTUBE_KEY } from \"../keys\";\nimport { ItemKind, YoutubeSearchResponse } from \"./types\";\nimport { Item, ItemType } from \"../types\";\nimport { createId } from \"../shared/utils\";\nimport { createSampleVideos, IS_USING_FAKE_API } from \"./fake.api\";\nimport {myFetch} from './fetch';\ninterface ResponseType {\n  items: Item[];\n}\n\nexport const searchVideos = (\n  term: string,\n  pageToken?: string\n): Promise<ResponseType> =>\n    searchForVideos(\"search\", {\n        shart: \"mostPopular\",\n        q: logRequest(term, \"search\")\n      });\n\nexport const searchSimilar = (videoId: string) =>\n  IS_USING_FAKE_API\n    ? Promise.resolve(createSampleVideos(20))\n    : searchForVideos(\"search\", {\n        type: \"video\",\n        relatedToVideoId: logRequest(videoId, \"search.similar\")\n      });\n\nexport const loadPlaylistVideos = (playlistId: string) =>\n  IS_USING_FAKE_API\n    ? Promise.resolve(createSampleVideos(20))\n    : searchForVideos(\"playlistItems\", {\n        part: \"snippet\",\n        playlistId,\n        maxResults: 20\n      });\n\nconst searchForVideos = (verb: string, props: {}): Promise<ResponseType> =>\n  myFetch(\n    url(verb, {\n      part: \"snippet\",\n      maxResults: 20,\n      ...props\n    })\n  )\n    .then((data: YoutubeSearchResponse) => {\n      return {\n        items: data.items\n          .filter(item => isItemSupported(getId(item).kind))\n          .map(item => ({\n            //PLAYLIST HAVE DIFFERENT VIDEO IDS\n            videoId: getId(item).videoId || getId(item).playlistId || \"\",\n            imageUrl: item.snippet.thumbnails.medium.url,\n            text: item.snippet.title,\n            id: createId(),\n            type: mapType(getId(item).kind)\n          }))\n      }\n    });\n\nconst getId = (item:any) => {\n  if(item.kind === 'youtube#playlistItem')\n    return item.snippet.resourceId;\n  return item.id;\n}\n\nconst logRequest = (term: string, requestType: string) => {\n  console.log(`Requesting Youtube ${requestType} for ${term}`);\n  return term;\n};\n\nconst isItemSupported = (itemKind: ItemKind): boolean =>\n  itemKind === \"youtube#video\" ||\n  itemKind === \"youtube#playlist\" ||\n  itemKind === \"youtube#playlistItem\";\n// itemKind === \"youtube#channel\";\n\nconst mapType = (itemKind: ItemKind): ItemType => {\n  if (itemKind === \"youtube#video\" || itemKind === \"youtube#playlistItem\")\n    return \"video\";\n  else return \"playlist\";\n};\n\nconst defaultProps = {\n  key: YOUTUBE_KEY\n};\n\nconst parseProps = (props: any): string => {\n  const allProps = { ...props, ...defaultProps };\n  return Object.keys(allProps)\n    .filter(key => typeof allProps[key] !== \"undefined\")\n    .map(key => `${key}=${allProps[key]}`)\n    .join(\"&\");\n};\nconst url = (verb: string, props: {}) =>\n  `https://www.googleapis.com/youtube/v3/${verb}?${parseProps(props)}`;\n","import { ApplicationState, Item } from \"../types\";\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { createId } from \"../shared/utils\";\nimport { findSimilarArtistsDone, topBarButtonPressed } from \"../menu/actions\";\nimport { loadPlaylistVideos, searchSimilar } from \"../api/youtube\";\n\nexport enum ACTIONS {\n  REMOVE_COLUMN = \"REMOVE_COLUMN\",\n  CREATE_COLUMN = \"CREATE_COLUMN\",\n  SEARCH_DONE = \"SEARCH_DONE\",\n  FIND_SIMILAR_START = \"FIND_SIMILAR_START\",\n  FIND_SIMILAR_DONE = \"FIND_SIMILAR_DONE\",\n  SELECT_BOARD = \"SELECT_BOARD\",\n  RENAME_COLUMN = \"RENAME_COLUMN\",\n  DRAG_END = \"DRAG_END\",\n  CREATE_BOARD = \"CREATE_BOARD\",\n  REMOVE_BOARD = \"REMOVE_BOARD\",\n  RENAME_BOARD = \"RENAME_BOARD\",\n  CREATE_YOUTUBE_PLAYLIST = \"CREATE_YOUTUBE_PLAYLIST\",\n  DONE_LOADING_PLAYLIST = \"DONE_LOADING_PLAYLIST\",\n  RESET = \"RESET\"\n}\n\nexport interface RemoveAction {\n  type: ACTIONS.REMOVE_COLUMN;\n  columnId: string;\n}\n\nexport interface RenameColumn {\n  type: ACTIONS.RENAME_COLUMN;\n  columnId: string;\n  newName: string;\n}\n\nexport interface SelectBoard {\n  type: ACTIONS.SELECT_BOARD;\n  boardId: string;\n}\n\nexport interface CreateColumnConfig {\n  fromStart: boolean;\n  columnId: string;\n  columnName: string;\n  isLoading: boolean;\n}\n\nexport interface CreateColumnAction {\n  type: ACTIONS.CREATE_COLUMN;\n  columnConfiguration: Partial<CreateColumnConfig>;\n}\n\nexport interface SearchDone {\n  type: ACTIONS.SEARCH_DONE;\n  items: Item[];\n}\n\nexport interface EndDrag {\n  type: ACTIONS.DRAG_END;\n  dropResult: DropResult;\n}\n\nexport interface CreateBoard {\n  type: ACTIONS.CREATE_BOARD;\n  boardId: string;\n}\nexport interface RenameBoard {\n  type: ACTIONS.RENAME_BOARD;\n  boardId: string;\n  newText: string;\n}\nexport interface RemoveBoard {\n  type: ACTIONS.REMOVE_BOARD;\n  boardId: string;\n}\nexport interface Reset {\n  type: ACTIONS.RESET;\n}\nexport interface DoneLoadingPlaylist {\n  type: ACTIONS.DONE_LOADING_PLAYLIST;\n  items: Item[];\n  playlistId: string;\n}\n\nexport type Action =\n  | RemoveAction\n  | CreateColumnAction\n  | SelectBoard\n  | RenameColumn\n  | EndDrag\n  | CreateBoard\n  | RenameBoard\n  | RemoveBoard\n  | Reset\n  | DoneLoadingPlaylist\n  | SearchDone;\n\nexport const removeColumn = (columnId: string) => ({\n  type: ACTIONS.REMOVE_COLUMN,\n  columnId\n});\n\nexport const searchDone = (items: Item[]) => ({\n  type: ACTIONS.SEARCH_DONE,\n  items\n});\n\nexport const createColumn = (\n  columnConfiguration: Partial<CreateColumnConfig> = {}\n): CreateColumnAction => ({\n  type: ACTIONS.CREATE_COLUMN,\n  columnConfiguration\n});\n\nexport const selectBoard = (boardId: string) => ({\n  type: ACTIONS.SELECT_BOARD,\n  boardId\n});\n\nexport const renameColumn = (columnId: string, newName: string) => ({\n  type: ACTIONS.RENAME_COLUMN,\n  columnId,\n  newName\n});\n\nexport const createAndSelectNewBoard = (): CreateBoard => {\n  const newID = createId();\n  return {\n    type: ACTIONS.CREATE_BOARD,\n    boardId: newID\n  };\n};\n\nexport const endDrag = (dropResult: DropResult): EndDrag => ({\n  type: ACTIONS.DRAG_END,\n  dropResult\n});\n\nexport const renameBoard = (\n  boardId: string,\n  boardName: string\n): RenameBoard => ({\n  type: ACTIONS.RENAME_BOARD,\n  boardId,\n  newText: boardName\n});\n\nexport const removeBoard = (boardId: string): RemoveBoard => ({\n  type: ACTIONS.REMOVE_BOARD,\n  boardId\n});\n\nexport const findSimilar = (videoId: string) => (\n  dispatch: any,\n  getState: () => ApplicationState\n) => {\n  dispatch({\n    type: \"FIND_SIMILAR_START\"\n  });\n\n  const { userOptions } = getState();\n  if (\n    !userOptions.isLeftSidebarVisible ||\n    userOptions.leftSidebarContentType !== \"similar\"\n  )\n    dispatch(topBarButtonPressed(\"similar\"));\n\n  setTimeout(() => {\n    searchSimilar(videoId).then(({ items }) => {\n      dispatch(findSimilarArtistsDone(items));\n    });\n  }, 1000);\n};\n\nexport const loadPlaylist = (item: Item) => (dispatch: any) => {\n  const id = createId();\n  dispatch(\n    createColumn({ columnName: item.text, columnId: id, fromStart: true })\n  );\n\n  console.log(item.videoId);\n  loadPlaylistVideos(item.videoId).then(({ items }) => {\n    dispatch(doneLoadingPlaylist(id, items));\n  });\n};\n\nexport const reset = (): Reset => ({\n  type: ACTIONS.RESET\n});\n\nexport const doneLoadingPlaylist = (\n  playlistId: string,\n  items: Item[]\n): DoneLoadingPlaylist => ({\n  type: ACTIONS.DONE_LOADING_PLAYLIST,\n  items,\n  playlistId\n});\n","import {YoutubeSearchResponse} from \"./types\";\n\nexport const myFetch = (input: RequestInfo): Promise<YoutubeSearchResponse> =>\n  fetch(input).then(res => res.json());\n","export const YOUTUBE_KEY = \"AIzaSyAk1MbyIUnFinouWsMg46UwgHa8JjHBrsw\";\n","import {Board, Item} from \"./types\";\nimport {DraggableLocation, DropResult} from \"react-beautiful-dnd\";\n\nexport const handleDnd = (board: Board, result: DropResult): Board => {\n  const {destination, source} = result;\n  if (!destination) return board;\n\n  if (\n    destination.droppableId === source.droppableId &&\n    destination.index === source.index\n  )\n    return board;\n\n  if (source.droppableId === \"board\") {\n    const columnOrders = [...board.columnOrders];\n    columnOrders.splice(source.index, 1);\n    columnOrders.splice(destination.index, 0, result.draggableId);\n    return {\n      ...board,\n      columnOrders\n    };\n  }\n\n  const oldItem = getItemBeingDragged(board, source);\n\n  const without = removeItemFromBoard(board, source.droppableId, source.index);\n\n  return insertIntoColumn(\n    without,\n    destination.droppableId,\n    destination.index,\n    oldItem\n  );\n};\n\nconst getColumn = (board: Board, columnId: string) => board.columns[columnId];\n\nconst getItemBeingDragged = (board: Board, source: DraggableLocation) =>\n  board.columns[source.droppableId].items[source.index];\n\nconst removeItemFromBoard = (\n  board: Board,\n  columnId: string,\n  itemIndex: number\n): Board => {\n  const column = getColumn(board, columnId);\n  const items = [...column.items];\n  items.splice(itemIndex, 1);\n  return updateItemInColumn(board, columnId, items);\n};\n\nconst insertIntoColumn = (\n  board: Board,\n  columnId: string,\n  itemIndex: number,\n  item: any\n) => {\n  const column = getColumn(board, columnId);\n  const items = [...column.items];\n  items.splice(itemIndex, 0, item);\n  return updateItemInColumn(board, columnId, items);\n};\n\nconst updateItemInColumn = (\n  board: Board,\n  columnId: string,\n  items: Item[]\n): Board => {\n  return {\n    ...board,\n    columns: {\n      ...board.columns,\n      [columnId]: {\n        ...getColumn(board, columnId),\n        items\n      }\n    }\n  };\n};\n","import { ApplicationState } from \"./types\";\n\nlet _id = 100;\nconst id = () => _id++ + \"\";\n\nexport const initialState = (): ApplicationState => ({\n  boards: {\n    BOARD_1: {\n      boardId: \"BOARD_1\",\n      boardName: \"My Board\",\n      boardOptions: {},\n      columns: {\n        \"1\": {\n          id: \"1\",\n          items: [\n            {\n              text: \"Short name\",\n              id: id(),\n              videoId: \"1\",\n              imageUrl: \"https://i.ytimg.com/vi/6Zo_FTUNDBI/mqdefault.jpg\",\n              type: \"video\"\n            }\n          ],\n          name: \"First\",\n          type: \"PLAYLIST\"\n        },\n        \"2\": {\n          id: \"2\",\n          items: [\n            {\n              text: \"Title 2\",\n              id: \"MY_VIDEO_ID\",\n              videoId: \"YOUTUBE_ID\",\n              imageUrl: \"\",\n              type: \"video\"\n            }\n          ],\n          name: \"Second\",\n          type: \"PLAYLIST\"\n        },\n        \"3\": {\n          id: \"3\",\n          items: [\n            {\n              text: \"Album 1.1\",\n              id: id(),\n              videoId: \"1\",\n              imageUrl: \"\",\n              type: \"video\"\n            },\n            {\n              text: \"Album 2.2\",\n              id: id(),\n              videoId: \"1\",\n              imageUrl: \"\",\n              type: \"video\"\n            },\n            {\n              text: \"Album 3.3\",\n              id: id(),\n              videoId: \"1\",\n              imageUrl: \"\",\n              type: \"video\"\n            }\n          ],\n          name: \"Third\",\n          type: \"SEARCH\"\n        },\n        SEARCH: {\n          id: \"SEARCH\",\n          items: [\n            {\n              text: \"Title 2\",\n              id: \"MY_VIDEO_ID_AT_SEARCH\",\n              videoId: \"YOUTUBE_ID_AT_SEARCH\",\n              imageUrl: \"\",\n              type: \"video\"\n            }\n          ],\n          name: \"SEARCH\",\n          type: \"SEARCH\"\n        }\n      },\n      columnOrders: [\"1\", \"2\", \"3\"]\n    },\n    BOARD_2: {\n      boardName: \"ANOTHER BOARd\",\n      boardId: \"BOARD_2\",\n      boardOptions: {},\n      columns: {\n        SEARCH: {\n          id: \"SEARCH\",\n          items: [],\n          name: \"SEARCH\",\n          type: \"SEARCH\"\n        }\n      },\n      columnOrders: []\n    }\n  },\n  boardsOrder: [\"BOARD_1\", \"BOARD_2\"],\n  selectedBoard: \"BOARD_1\",\n  userOptions: {\n    isLeftSidebarVisible: false,\n    leftSidebarContentType: \"search\"\n  }\n});\n","import {\n  ApplicationState,\n  Board,\n  BoardsContainer,\n  Column,\n  Item\n} from \"../types\";\nimport { Action, ACTIONS } from \"./actions\";\nimport { handleDnd } from \"../operations\";\nimport { initialState } from \"../state\";\nimport { createId } from \"../shared/utils\";\n\nexport default (state: ApplicationState, action: Action): ApplicationState => {\n  if (action.type === ACTIONS.RESET) {\n    return initialState();\n  }\n  if (action.type === ACTIONS.REMOVE_COLUMN) {\n    const selectedBoard = getSelectedBoard(state);\n    const columns = {\n      ...selectedBoard.columns\n    };\n    delete columns[action.columnId];\n    const newBoard: Board = {\n      ...selectedBoard,\n      columnOrders: selectedBoard.columnOrders.filter(\n        cc => cc !== action.columnId\n      ),\n      columns: columns\n    };\n    return updateBoard(state, newBoard);\n  }\n  if (action.type === ACTIONS.CREATE_COLUMN) {\n    const selectedBoard = getSelectedBoard(state);\n    const newColumn: Column = {\n      items: [],\n      name: action.columnConfiguration.columnName || \"New Column\",\n      id: action.columnConfiguration.columnId || createId(),\n      type: \"PLAYLIST\"\n    };\n    const orderModifier = action.columnConfiguration.fromStart\n      ? prepend\n      : append;\n    const newBoard: Board = {\n      ...selectedBoard,\n      columnOrders: orderModifier(selectedBoard.columnOrders, newColumn.id)\n    };\n    return updateBoard(state, updateColumnInBoard(newBoard, newColumn));\n  }\n  if (action.type === ACTIONS.DONE_LOADING_PLAYLIST) {\n    //TODO: this will trigger an error if I will select another board while playlist is being loaded\n    return updateColumnInSelectedBoard(state, {\n      id: action.playlistId,\n      items: action.items\n    });\n  }\n  if (action.type === ACTIONS.SEARCH_DONE) {\n    return updateColumnInSelectedBoard(state, {\n      id: \"SEARCH\",\n      items: action.items\n    });\n  }\n  if (action.type === ACTIONS.SELECT_BOARD) {\n    return {\n      ...state,\n      selectedBoard: action.boardId\n    };\n  }\n  if (action.type === ACTIONS.RENAME_COLUMN) {\n    return updateColumnInSelectedBoard(state, {\n      id: action.columnId,\n      name: action.newName\n    });\n  }\n  if (action.type === ACTIONS.DRAG_END) {\n    //TODO: try to cover full cycle with specs\n    //probably trigger action in unit tests and check DOM state.\n    //there is no way right now to trigger dnd from DOM\n    const selectedBoard = getSelectedBoard(state);\n    return updateBoard(state, handleDnd(selectedBoard, action.dropResult));\n  }\n  if (action.type === ACTIONS.CREATE_BOARD) {\n    return {\n      ...state,\n      boardsOrder: state.boardsOrder.concat([action.boardId]),\n      boards: createDefaultBoard(state.boards, action.boardId),\n      selectedBoard: action.boardId\n    };\n  }\n  if (action.type === ACTIONS.RENAME_BOARD) {\n    return updateBoard(state, {\n      ...state.boards[action.boardId],\n      boardName: action.newText\n    });\n  }\n  if (action.type === ACTIONS.REMOVE_BOARD) {\n    const boards = state.boards;\n    //TODO: warning mutation\n    delete boards[action.boardId];\n\n    return {\n      ...state,\n      boardsOrder: state.boardsOrder.filter(b => b !== action.boardId),\n      selectedBoard: selectOtherBoard(\n        state.boardsOrder,\n        state.selectedBoard,\n        action.boardId\n      ),\n      boards\n    };\n  }\n  return state;\n};\n\nconst selectOtherBoard = (\n  boards: string[],\n  selectedBoard: string,\n  boardBeingRemoved: string\n) => {\n  if (selectedBoard !== boardBeingRemoved) return selectedBoard;\n  return boards.filter(b => b !== selectedBoard)[0];\n};\n\n//REDUCER HELPERS (candidates for nested reducers)\n\nconst updateBoard = (state: ApplicationState, board: Board) => ({\n  ...state,\n  boards: {\n    ...state.boards,\n    [board.boardId]: board\n  }\n});\n\nconst updateColumnInBoard = (board: Board, column: Column): Board => ({\n  ...board,\n  columns: {\n    ...board.columns,\n    [column.id]: column\n  }\n});\n\nconst createDefaultBoard = (boards: BoardsContainer, boardId: string) => {\n  const newBoard: Board = JSON.parse(\n    //TODO: Extract into separate function without ugly BOARD_2\n    JSON.stringify(initialState().boards[\"BOARD_2\"])\n  );\n  newBoard.boardName = \"New Board\";\n  newBoard.boardId = boardId;\n  return {\n    ...boards,\n    [boardId]: newBoard\n  };\n};\n\ntype PartialColumnWithId = Partial<Column> & { id: string };\nconst updateColumnInSelectedBoard = (\n  state: ApplicationState,\n  column: PartialColumnWithId\n) => {\n  const selectedBoard = getSelectedBoard(state);\n  return updateBoard(\n    state,\n    updateColumnInBoard(selectedBoard, {\n      ...selectedBoard.columns[column.id],\n      ...column\n    })\n  );\n};\n\n//SELECTOR CANDIDATES\nexport const getSelectedBoard = (state: ApplicationState) =>\n  state.boards[state.selectedBoard];\n\nexport const getColumnsForSelectedBoard = (\n  state: ApplicationState\n): Column[] => {\n  const board = getSelectedBoard(state);\n  if (!board) {\n    return [];\n  }\n  return board.columnOrders.map(id => board.columns[id]);\n};\n\n//UTIL CANDIDATES\nconst append = <T>(array: T[], item: T): T[] => array.concat([item]);\nconst prepend = <T>(array: T[], item: T): T[] => [item].concat(array);\n","import { Item } from \"../types\";\n\nexport enum ACTIONS {\n  PLAY = \"PLAY\"\n}\n\nexport type Action = PlayAction;\n\ninterface PlayAction {\n  type: ACTIONS.PLAY;\n  item: Item;\n}\n\nexport const play = (item: Item): PlayAction => ({\n  type: ACTIONS.PLAY,\n  item\n});\n","import {\n  ApplicationState,\n  Board,\n  BoardOptions,\n  Column,\n  UserOptions\n} from \"../types\";\nimport { Action } from \"./actions\";\n\nexport default (state: ApplicationState, action: Action): ApplicationState => {\n  const selectedBoard = getSelectedBoard(state);\n\n  if (action.type === \"FIND_SIMILAR_START\") {\n    return updateBoardOptions(state, selectedBoard, { isLoadingSimilar: true });\n  }\n\n  if (action.type === \"TOP_BAR_BUTTON_PRESSED\") {\n    const leftVisible = state.userOptions.isLeftSidebarVisible;\n    const sidebarState = state.userOptions.leftSidebarContentType;\n    const newSidebarState = action.buttonPressedType;\n    if (leftVisible && sidebarState === newSidebarState) {\n      return updateUserOptions(state, { isLeftSidebarVisible: false });\n    } else if (!leftVisible) {\n      return updateUserOptions(state, {\n        isLeftSidebarVisible: true,\n        leftSidebarContentType: newSidebarState\n      });\n    } else {\n      return updateUserOptions(state, {\n        leftSidebarContentType: newSidebarState\n      });\n    }\n  }\n\n  if (action.type === \"FIND_SIMILAR_DONE\") {\n    const withoutLoad = updateBoardOptions(state, selectedBoard, {\n      isLoadingSimilar: false\n    });\n\n    return updateBoard(\n      withoutLoad,\n      updateColumnInBoard(getSelectedBoard(withoutLoad), {\n        id: \"SIMILAR\",\n        items: action.items,\n        type: \"SIMILAR\",\n        name: \"Similar\"\n      })\n    );\n  }\n  return state;\n};\n\n//REDUCER HELPERS (candidates for nested reducers)\n//TODO: remove duplication\n\nconst updateBoardOptions = (\n  state: ApplicationState,\n  board: Board,\n  options: Partial<BoardOptions>\n) => updateBoard(state, updateOptions(board, options));\n\nconst updateOptions = (\n  board: Board,\n  options: Partial<BoardOptions>\n): Board => ({\n  ...board,\n  boardOptions: {\n    ...board.boardOptions,\n    ...options\n  }\n});\n\nconst updateUserOptions = (\n  state: ApplicationState,\n  options: Partial<UserOptions>\n): ApplicationState => ({\n  ...state,\n  userOptions: {\n    ...state.userOptions,\n    ...options\n  }\n});\n\nconst updateBoard = (state: ApplicationState, board: Board) => ({\n  ...state,\n  boards: {\n    ...state.boards,\n    [board.boardId]: board\n  }\n});\n\nconst updateColumnInBoard = (board: Board, column: Column): Board => ({\n  ...board,\n  columns: {\n    ...board.columns,\n    [column.id]: column\n  }\n});\n\nexport const getSelectedBoard = (state: ApplicationState) =>\n  state.boards[state.selectedBoard];\n","import { createStore, applyMiddleware, compose, Store } from \"redux\";\nimport boardReducer from \"./board/reducer\";\nimport playerReducer from \"./player/reducer\";\nimport menuReducer from \"./menu/reducer\";\nimport { initialState } from \"./state\";\nimport reduceReducers from \"reduce-reducers\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { ApplicationState } from \"./types\"; // defaults to localStorage for web\nimport thunk from \"redux-thunk\";\n\n//even if I provide default state, TS still argues that I need to handle undefined as input within reducer\n// @ts-ignore\nconst rootReducer = reduceReducers(\n  initialState(),\n  boardReducer,\n  playerReducer,\n  menuReducer\n);\nconst composeEnhancers: typeof compose =\n  //@ts-ignore\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst blacklist: (keyof ApplicationState)[] = [\"itemBeingPlayed\"];\n\nexport const persistedReducer = persistReducer(\n  {\n    key: \"MY_CONFIG\",\n    blacklist,\n    storage\n  },\n  rootReducer\n);\n\nexport const createTrelloTubeStore = (): Store<ApplicationState> =>\n  createStore(\n    persistedReducer,\n    composeEnhancers(applyMiddleware(thunk))\n  ) as any;\n\nexport const store = createTrelloTubeStore();\nconst persistor = persistStore(store);\nexport default { store, persistor };\n","import { ApplicationState } from \"../types\";\nimport { Action, ACTIONS } from \"./actions\";\n\nexport default (state: ApplicationState, action: Action): ApplicationState => {\n  if (action.type === ACTIONS.PLAY)\n    return {\n      ...state,\n      itemBeingPlayed: action.item\n    };\n  return state;\n};\n","const imageWidthheighRatio = 320 / 180;\nconst imageWidth = 74;\nconst imageHeight = imageWidth / imageWidthheighRatio;\nconst stackWidth = 220;\nconst stackPadding = 8;\nexport default {\n  STACK_WIDTH: stackWidth,\n  STACK_PADDING: stackPadding,\n\n  CARD_IMAGE_WIDTH: imageWidth,\n  CARD_IMAGE_HEIGHT: imageHeight,\n  CARD_HEIGHT: imageHeight,\n  CARD_WIDTH: stackWidth - stackPadding * 2,\n  CARD_TEXT_WIDTH: stackWidth - imageWidth,\n\n  BORDER_RADIUS: 4,\n\n  SIDEBAR_WIDTH: stackWidth + stackPadding * 2,\n\n  TOP_BAR_HEIGHT: 40,\n  PLAYER_HEIGHT: 60,\n\n};\n","import styled from \"styled-components\";\nimport c from \"./constants\";\n\nconst Options = styled.div`\n  display: none;\n`;\n\nconst ColumnContainer = styled.div`\n  background-color: lightblue;\n  margin-left: 8px;\n  border-radius: ${c.BORDER_RADIUS}px;\n  width: ${c.STACK_WIDTH}px;\n  max-height: calc(\n    100vh - ${c.STACK_PADDING * 2}px - ${c.TOP_BAR_HEIGHT}px -\n      ${c.PLAYER_HEIGHT}px\n  );\n  overflow: scroll;\n  display: flex;\n  flex-direction: column;\n  padding-left: ${c.STACK_PADDING}px;\n  padding-right: ${c.STACK_PADDING}px;\n  &:hover ${Options} {\n    display: inherit;\n  }\n`;\n\nconst TaskList = styled.div`\n  flex-grow: 1;\n  min-height: 50px;\n`;\n\nconst BoardContainer = styled.div`\n  display: inline-flex;\n  align-items: flex-start;\n  margin: 8px 8px 8px 8px;\n\n  &:first-of-type {\n    margin-left: 0;\n  }\n`;\nconst Title = styled.h4`\n  margin-bottom: 0;\n  padding-left: ${c.STACK_PADDING}px;\n  padding-bottom: ${c.STACK_PADDING}px;\n\n  display: flex;\n  justify-content: space-between;\n`;\nconst CardButton = styled.button`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  display: none;\n`;\n\nconst CardType = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  font-size: 12px;\n  background-color: black;\n  opacity: 0.6;\n  font-weight: bold;\n  border-bottom-left-radius: ${c.BORDER_RADIUS}px;\n  color: white;\n`;\n\nconst TaskContainer = styled.div<{ isPlaying: boolean }>`\n  position: relative;\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  border-radius: ${c.BORDER_RADIUS}px;\n  background-color: ${props => (props.isPlaying ? \"lightpink\" : \"white\")};\n  transition: background-color 400ms;\n  margin-bottom: ${c.STACK_PADDING}px;\n  box-shadow: 0 2px 1px -1px gray;\n  &:hover ${CardButton} {\n    display: inherit;\n  }\n`;\n\nconst Img = styled.img`\n  width: ${c.CARD_IMAGE_WIDTH}px;\n  height: ${c.CARD_IMAGE_HEIGHT}px;\n  border-top-left-radius: ${c.BORDER_RADIUS}px;\n  border-bottom-left-radius: ${c.BORDER_RADIUS}px;\n`;\n\nconst Subtext = styled.div`\n  color: #1e1e1e;\n  font-size: 14px;\n\n  display: flex;\n  align-items: center;\n  padding-left: ${c.STACK_PADDING}px;\n  width: ${c.CARD_TEXT_WIDTH}px;\n  height: ${c.CARD_HEIGHT}px;\n`;\n\nexport {\n  BoardContainer,\n  Title,\n  TaskList,\n  ColumnContainer,\n  Options,\n  Subtext,\n  Img,\n  TaskContainer,\n  CardButton,\n  CardType\n};\n","import { ApplicationState, Item } from \"../types\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport {\n  TaskContainer,\n  Img,\n  Subtext,\n  CardButton,\n  CardType\n} from \"./components\";\nimport Truncate from \"react-truncate\";\nimport { connect } from \"react-redux\";\nimport { findSimilar, loadPlaylist } from \"./actions\";\nimport { play } from \"../player/actions\";\n\ninterface Props {\n  item: Item;\n  index: number;\n  play: (item: Item) => void;\n  findSimilar: (videoId: string) => void;\n  loadPlaylist: (item: Item) => void;\n  currentItemId?: string;\n}\n\nconst decode = (text: string): string => {\n  const dom = new DOMParser().parseFromString(\n    \"<!doctype html><body>\" + text,\n    \"text/html\"\n  );\n  return dom.body.textContent || \"\";\n};\n\nconst Card = ({\n  item,\n  index,\n  play,\n  findSimilar,\n  loadPlaylist,\n  currentItemId\n}: Props) => {\n  const onFindSimilar = (e: any) => {\n    e.stopPropagation();\n    findSimilar(item.videoId);\n  };\n  const onLoadPlaylist = (e: any) => {\n    e.stopPropagation();\n    loadPlaylist(item);\n  };\n\n  return (\n    <Draggable draggableId={item.id} index={index} type=\"item\">\n      {provided => (\n        <TaskContainer\n          title={item.text}\n          isPlaying={currentItemId === item.id}\n          data-testid={\"video-\" + item.id}\n          onClick={() => play(item)}\n          ref={provided.innerRef}\n          {...provided.dragHandleProps}\n          {...provided.draggableProps}\n        >\n          <Img src={item.imageUrl}></Img>\n          <Subtext>\n            <Truncate width={220 - 74 - 10} lines={2}>\n              {decode(item.text)}\n            </Truncate>\n          </Subtext>\n          <CardType>{item.type === \"video\" ? \"V\" : \"P\"}</CardType>\n          {item.type === \"video\" ? (\n            <CardButton onClick={onFindSimilar}>similar</CardButton>\n          ) : (\n            <CardButton\n              title=\"This will place playlist at the start of the board\"\n              onClick={onLoadPlaylist}\n            >\n              load\n            </CardButton>\n          )}\n        </TaskContainer>\n      )}\n    </Draggable>\n  );\n};\n\nconst mapState = (state: ApplicationState) => ({\n  currentItemId: state.itemBeingPlayed && state.itemBeingPlayed.id\n});\n\nexport default connect(\n  mapState,\n  { findSimilar, play, loadPlaylist }\n)(Card);\n","import styled from \"styled-components\";\nimport c from \"../../board/components/constants\";\n\ninterface Props {\n  isSelected?: boolean;\n}\n\nexport const BoardOptions = styled.div`\n  position: absolute;\n  left: 0;\n  right: 8px;\n  justify-content: flex-end;\n  display: none;\n`;\n\nexport const BoardItemView = styled.div<Props>`\n  cursor: pointer;\n  &:hover {\n    background-color: lightpink;\n  }\n  padding-left: 20px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${props => (props.isSelected ? \"purple\" : \"black\")};\n  &:hover ${BoardOptions} {\n    display: flex;\n  }\n`;\n\nexport const SidebarVideosContainer = styled.div`\n  padding-left: ${c.STACK_PADDING}px;\n  padding-right: ${c.STACK_PADDING}px;\n`;\n","import { ApplicationState, Item } from \"../types\";\nimport React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\nimport { searchVideos } from \"../api/youtube\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Card from \"../board/Card\";\nimport { SEARCH_DELAY } from \"./constants\";\nimport { connect } from \"react-redux\";\nimport { searchDone } from \"../board/actions\";\nimport { SidebarVideosContainer } from \"./components\";\n\nexport interface SearchProps {\n  items: Item[];\n  searchDone: (items: Item[]) => void;\n}\n\nconst SearchArea = ({ items, searchDone }: SearchProps) => {\n  const [term, setTerm] = useState(\"\");\n  const debounced = useDebounce(term, SEARCH_DELAY);\n  const onSearch = (e: ChangeEvent<HTMLInputElement>) =>\n    setTerm(e.target.value);\n\n  useEffect(() => {\n    if (debounced) {\n      searchVideos(debounced).then(response => searchDone(response.items));\n    }\n  }, [debounced]);\n\n  return (\n    <SidebarVideosContainer>\n      <input\n        data-testid=\"search-input\"\n        type=\"text\"\n        value={term}\n        onChange={onSearch}\n      />\n      <Droppable droppableId=\"SEARCH\" type=\"item\">\n        {(provided, snapshot) => (\n          <div ref={provided.innerRef} {...provided.droppableProps}>\n            {items.map((i, index) => (\n              <Card key={i.id} index={index} item={i} />\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </SidebarVideosContainer>\n  );\n};\nconst mapState = (state: ApplicationState) => ({\n  items: state.boards[state.selectedBoard].columns[\"SEARCH\"].items\n});\nexport default connect(\n  mapState,\n  { searchDone }\n)(SearchArea);\n","import {useEffect, useState} from \"react\";\n\nexport function useDebounce(value: any, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","export const SEARCH_DELAY = 600;\n","import React, { KeyboardEvent, useEffect, useState } from \"react\";\ninterface Props {\n  dragHandleProps: {} | null;\n  label: string;\n  id: string;\n  testIdGroupName: string;\n  onRename: (columnId: string, newLabel: string) => void;\n  onRemove: (columnId: string) => void;\n  Title: any;\n  Options: any;\n}\nconst EditableTitle = ({\n  id,\n  label,\n  onRename,\n  onRemove,\n  dragHandleProps,\n  testIdGroupName,\n  Title,\n  Options\n}: Props) => {\n  const [isRenaming, setIsRenaming] = useState(false);\n  const [newText, setNewText] = useState(label);\n\n  const onEditButtonPress = (e: any) => {\n    e.stopPropagation();\n    if (isRenaming) {\n      onRename(id, newText);\n    }\n    setIsRenaming(!isRenaming);\n  };\n\n  const onBlur = () => {\n    setIsRenaming(false);\n    onRename(id, newText);\n  };\n\n  const keyPress = ({ key }: KeyboardEvent<HTMLInputElement>) =>\n    key === \"Enter\" && onBlur();\n\n  const onRemoveClick = (e: any) => {\n    e.stopPropagation();\n    onRemove(id);\n  };\n\n  return (\n    <Title {...dragHandleProps} data-testid={`${testIdGroupName}-` + id}>\n      {isRenaming ? (\n        <input\n          autoFocus\n          onKeyPress={keyPress}\n          onBlur={onBlur}\n          type=\"text\"\n          value={newText}\n          data-testid={`${testIdGroupName}-input-` + id}\n          onChange={e => setNewText(e.target.value)}\n        />\n      ) : (\n        <div data-testid={`${testIdGroupName}-title-` + id}>{label}</div>\n      )}\n      <Options>\n        <button\n          data-testid={`${testIdGroupName}-rename-` + id}\n          onClick={onEditButtonPress}\n        >\n          E\n        </button>\n        <button\n          data-testid={`${testIdGroupName}-remove-` + id}\n          onClick={onRemoveClick}\n        >\n          X\n        </button>\n      </Options>\n    </Title>\n  );\n};\n\nexport default EditableTitle;\n","import { ApplicationState, Board } from \"../types\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  selectBoard,\n  createAndSelectNewBoard,\n  renameBoard,\n  removeBoard\n} from \"../board/actions\";\nimport { BoardItemView, BoardOptions } from \"./components\";\nimport EditableTitle from \"../shared/EditableTitle\";\n\ninterface Props {\n  app: ApplicationState;\n  selectBoard: (boardId: string) => void;\n  createAndSelectNewBoard: () => void;\n  renameBoard: (boardId: string, boardName: string) => void;\n  removeBoard: (boardId: string) => void;\n}\n\nconst BoardsSidebar = ({\n  app,\n  selectBoard,\n  createAndSelectNewBoard,\n  renameBoard,\n  removeBoard\n}: Props) => (\n  <div data-testid=\"board-view\">\n    {app.boardsOrder.map(boardId => (\n      <EditableTitle\n        //TODO fix performance problem here\n        dragHandleProps={{\n          isSelected: boardId === app.selectedBoard,\n          onClick: () => selectBoard(boardId)\n        }}\n        id={boardId}\n        key={boardId}\n        testIdGroupName=\"board-button\"\n        label={app.boards[boardId].boardName}\n        onRename={renameBoard}\n        onRemove={removeBoard}\n        Title={BoardItemView}\n        Options={BoardOptions}\n      />\n    ))}\n    <button data-testid=\"create-board-button\" onClick={createAndSelectNewBoard}>\n      create\n    </button>\n  </div>\n);\n\nconst mapState = (state: ApplicationState) => ({\n  app: state\n});\n\nexport default connect(\n  mapState,\n  { selectBoard, createAndSelectNewBoard, renameBoard, removeBoard }\n)(BoardsSidebar);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { ApplicationState, Item } from \"../types\";\nimport { getSelectedBoard } from \"./reducer\";\nimport Card from \"../board/Card\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport { SidebarVideosContainer } from \"./components\";\n\ninterface Props {\n  isLoading?: boolean;\n  items: Item[];\n}\nconst SimilarSidebar = ({ items, isLoading }: Props) => {\n  return (\n    <>\n      <h2>Similar</h2>\n\n      {isLoading && <h5>Loading...</h5>}\n\n      <SidebarVideosContainer>\n        {!isLoading && items && (\n          <Droppable droppableId=\"SIMILAR\" type=\"item\">\n            {(provided, snapshot) => (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {items.map((i, index) => (\n                  <Card key={i.id} index={index} item={i} />\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        )}\n      </SidebarVideosContainer>\n    </>\n  );\n};\n\nconst mapState = (state: ApplicationState) => {\n  const board = getSelectedBoard(state);\n  const similar = board.columns[\"SIMILAR\"];\n  return {\n    items: similar && similar.items,\n    isLoading: board.boardOptions && board.boardOptions.isLoadingSimilar\n  };\n};\n\nexport default connect(mapState)(SimilarSidebar);\n","import React from \"react\";\nimport SearchArea from \"./SearchSidebar\";\nimport BoardsSidebar from \"./BoardsSidebar\";\nimport SimilarSidebar from \"./SimilarSidebar\";\nimport { SidebarState } from \"../types\";\n\nconst Sidebar = ({ state }: { state: SidebarState }): JSX.Element => {\n  if (state === \"search\") {\n    return <SearchArea />;\n  } else if (state === \"board\") {\n    return <BoardsSidebar />;\n  } else return <SimilarSidebar />;\n};\n\nexport default Sidebar;\n","import React, { useState } from \"react\";\nimport Youtube from \"react-youtube\";\nimport { ApplicationState } from \"../types\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport c from \"../board/components/constants\";\n\ninterface Props {\n  videoId?: string;\n}\nconst BottomBar = styled.div`\n  min-height: ${c.PLAYER_HEIGHT}px;\n  background-color: lightcoral;\n`;\n\nconst Player = ({ videoId }: Props) => {\n  const [player, setPlayer] = useState();\n\n  return (\n    <BottomBar>\n      {videoId && (\n        <YoutubePlayerWrapper onReady={setPlayer} videoId={videoId} />\n      )}\n    </BottomBar>\n  );\n};\n\nconst YoutubePlayerWrapper = (props: any) => (\n  <div style={style}>\n    <Youtube\n      {...props}\n      onReady={e => props.onReady(e.target)}\n      opts={{\n        height: \"150\",\n        width: \"400\",\n        playerVars: {\n          // https://developers.google.com/youtube/player_parameters\n          autoplay: 1\n        }\n      }}\n    />\n  </div>\n);\n\nconst style = {\n  position: \"fixed\",\n  right: 15,\n  bottom: 15 + 60\n} as {};\n\nconst mapState = (state: ApplicationState) => ({\n  videoId: state.itemBeingPlayed && state.itemBeingPlayed.videoId\n});\n\nexport default connect(mapState)(Player);\n","import React from \"react\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Column, Item } from \"../types\";\nimport Card from \"./Card\";\nimport { connect } from \"react-redux\";\nimport { ColumnContainer, TaskList, Title, Options } from \"./components\";\nimport EditableTitle from \"../shared/EditableTitle\";\nimport { removeColumn, renameColumn } from \"./actions\";\n\ninterface Props {\n  column: Column;\n  index: number;\n  renameColumn: (columnId: string, newLabel: string) => void;\n  removeColumn: (columnId: string) => void;\n}\n\nconst ColumnView = ({ column, index, removeColumn, renameColumn }: Props) => {\n  return (\n    <Draggable draggableId={column.id} index={index}>\n      {columnProvided => (\n        <ColumnContainer\n          data-testid={\"column-\" + column.id}\n          ref={columnProvided.innerRef}\n          {...columnProvided.draggableProps}\n        >\n          <EditableTitle\n            dragHandleProps={columnProvided.dragHandleProps}\n            label={column.name}\n            id={column.id}\n            onRename={renameColumn}\n            onRemove={removeColumn}\n            testIdGroupName={\"column-label\"}\n            Title={Title}\n            Options={Options}\n          />\n          <Droppable droppableId={column.id} type=\"item\">\n            {(provided, snapshot) => (\n              <TaskList ref={provided.innerRef} {...provided.droppableProps}>\n                {column.items.map((item, index) => (\n                  <Card index={index} key={item.id} item={item} />\n                ))}\n                {provided.placeholder}\n              </TaskList>\n            )}\n          </Droppable>\n        </ColumnContainer>\n      )}\n    </Draggable>\n  );\n};\n\nexport default connect(\n  null,\n  { renameColumn, removeColumn }\n)(ColumnView);\n","import React from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport ColumnView from \"./Column\";\nimport { ApplicationState, Column } from \"../types\";\nimport { connect } from \"react-redux\";\nimport { createColumn, selectBoard } from \"./actions\";\nimport { getColumnsForSelectedBoard } from \"./reducer\";\nimport { BoardContainer } from \"./components\";\n\ninterface Props {\n  createColumn: any;\n  columns: Column[];\n}\n\nconst App = ({ createColumn, columns }: Props) => {\n  return (\n    <Droppable droppableId=\"board\" direction={\"horizontal\"} type=\"column\">\n      {provided => (\n        <BoardContainer ref={provided.innerRef} {...provided.droppableProps}>\n          {columns.map((column, index) => (\n            <ColumnView key={column.id} column={column} index={index} />\n          ))}\n          {provided.placeholder}\n          <button data-testid=\"column-create\" onClick={createColumn}>\n            + Playlist\n          </button>\n        </BoardContainer>\n      )}\n    </Droppable>\n  );\n};\n\nconst mapState = (state: ApplicationState) => ({\n  columns: getColumnsForSelectedBoard(state)\n});\nexport default connect(\n  mapState,\n  {\n    createColumn,\n    selectBoard\n  }\n)(App);\n","const paragrapg =\n  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\";\n\nexport const createParagraphs = (paragraphs = 1) =>\n  Array.from(Array(paragraphs))\n    .map(() => paragrapg)\n    .join(\" \");\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport AppSidebar from \"./menu/Sidebar\";\nimport Player from \"./player/Player\";\nimport Board from \"./board\";\nimport { createParagraphs } from \"./api/dummyText\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { connect } from \"react-redux\";\nimport { endDrag } from \"./board/actions\";\nimport c from \"./board/components/constants\";\nimport { ApplicationState, SidebarState, UserOptions } from \"./types\";\nimport { topBarButtonPressed } from \"./menu/actions\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  max-height: 100vh;\n  align-items: stretch;\n`;\n\nconst TopBar = styled.div`\n  min-height: ${c.TOP_BAR_HEIGHT}px;\n  background-color: lightcoral;\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  overflow: scroll;\n`;\n\ninterface VisibilityProps {\n  isVisible: boolean;\n}\n\nconst Sidebar = styled.div<VisibilityProps>`\n  width: ${props => (props.isVisible ? c.SIDEBAR_WIDTH : 0)}px;\n  transition: width 200ms;\n  overflow: scroll;\n`;\n\nconst LeftSidebar = styled(Sidebar)`\n  position: relative;\n  background-color: lightblue;\n`;\n\nconst RightSidebar = styled(Sidebar)`\n  background-color: lightseagreen;\n`;\n\nconst MainContent = styled.div`\n  background-color: #f1f1f1;\n\n  overflow: scroll;\n  flex: 1;\n`;\n\ninterface Props {\n  endDrag: (result: DropResult) => void;\n  topBarButtonPressed: (state: SidebarState) => void;\n  options: UserOptions;\n}\n\nconst App = ({ endDrag, topBarButtonPressed, options }: Props) => (\n  <DragDropContext onDragEnd={endDrag}>\n    <Container>\n      <TopBar>\n        TopBar\n        <button\n          data-testid=\"boards-button\"\n          onClick={() => topBarButtonPressed(\"board\")}\n        >\n          boards\n        </button>\n        <button\n          data-testid=\"search-button\"\n          onClick={() => topBarButtonPressed(\"search\")}\n        >\n          search\n        </button>\n        <button\n          data-testid=\"similar-button\"\n          onClick={() => topBarButtonPressed(\"similar\")}\n        >\n          similar\n        </button>\n      </TopBar>\n      <MainContainer>\n        <LeftSidebar isVisible={options.isLeftSidebarVisible}>\n          <AppSidebar state={options.leftSidebarContentType} />\n        </LeftSidebar>\n        <MainContent>\n          <Board />\n        </MainContent>\n        <RightSidebar isVisible={false}>{createParagraphs(10)}</RightSidebar>\n      </MainContainer>\n      <Player />\n    </Container>\n  </DragDropContext>\n);\n\nconst mapState = (state: ApplicationState) => ({\n  options: state.userOptions\n});\n\nexport default connect(\n  mapState,\n  { endDrag, topBarButtonPressed }\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport App from \"./CoreLayout\";\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}